# train_model.py
import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC  # Support Vector Machine - –°–û–í–ï–†–®–ï–ù–ù–û –¥—Ä—É–≥–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º!
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    classification_report, confusion_matrix
)
import time
import logging
import joblib
from sklearn.model_selection import cross_val_score
import matplotlib.pyplot as plt
import seaborn as sns

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def load_processed_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        X_train = pd.read_csv('data/processed/X_train.csv')
        X_test = pd.read_csv('data/processed/X_test.csv')
        y_train = pd.read_csv('data/processed/y_train.csv')
        y_test = pd.read_csv('data/processed/y_test.csv')

        y_train = y_train.values.ravel()
        y_test = y_test.values.ravel()

        logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: X_train {X_train.shape}, X_test {X_test.shape}")
        return X_train, X_test, y_train, y_test

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def train_random_forest(X_train, X_test, y_train, y_test):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Random Forest (–∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –¥–µ—Ä–µ–≤—å—è—Ö)"""

    params = {
        'n_estimators': 100,
        'max_depth': 10,
        'min_samples_split': 2,
        'min_samples_leaf': 1,
        'random_state': 42,
        'n_jobs': -1
    }

    start_time = time.time()

    with mlflow.start_run(run_name="Random Forest"):
        logger.info("–û–±—É—á–µ–Ω–∏–µ Random Forest...")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        mlflow.log_params(params)
        mlflow.log_param("model_type", "RandomForest")
        mlflow.log_param("algorithm", "Ensemble (Bagging)")

        model = RandomForestClassifier(**params)
        model.fit(X_train, y_train)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
        recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
        f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

        # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
        cv_scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')

        training_time = time.time() - start_time

        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        mlflow.log_metrics({
            "accuracy": accuracy,
            "precision": precision,
            "recall": recall,
            "f1_score": f1,
            "cv_mean_accuracy": cv_scores.mean(),
            "cv_std_accuracy": cv_scores.std(),
            "training_time_seconds": training_time
        })

        # –õ–æ–≥–∏—Ä—É–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        mlflow.log_artifact("data/processed/X_train.csv", "data")
        mlflow.log_artifact("data/processed/X_test.csv", "data")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        model_path = "models/random_forest_model.joblib"
        joblib.dump(model, model_path)
        mlflow.log_artifact(model_path, "models")

        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º confusion matrix
        plt.figure(figsize=(10, 8))
        cm = confusion_matrix(y_test, y_pred)
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
        plt.title('Confusion Matrix - Random Forest')
        plt.ylabel('True Label')
        plt.xlabel('Predicted Label')
        plt.savefig('confusion_matrix_rf.png')
        mlflow.log_artifact('confusion_matrix_rf.png')
        plt.close()

        logger.info(f"Random Forest –æ–±—É—á–µ–Ω –∑–∞ {training_time:.2f} —Å–µ–∫. Accuracy: {accuracy:.4f}")

        return model, accuracy, training_time


def train_svm(X_train, X_test, y_train, y_test):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Support Vector Machine (SVM) - –°–û–í–ï–†–®–ï–ù–ù–û –¥—Ä—É–≥–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º!"""

    params = {
        'C': 1.0,
        'kernel': 'rbf',
        'gamma': 'scale',
        'random_state': 42,
        'probability': True
    }

    start_time = time.time()

    with mlflow.start_run(run_name="Support Vector Machine"):
        logger.info("–û–±—É—á–µ–Ω–∏–µ SVM...")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        mlflow.log_params(params)
        mlflow.log_param("model_type", "SVM")
        mlflow.log_param("algorithm", "Maximum Margin Classifier")

        model = SVC(**params)
        model.fit(X_train, y_train)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
        recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
        f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

        # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
        cv_scores = cross_val_score(model, X_train, y_train, cv=3, scoring='accuracy')  # –ú–µ–Ω—å—à–µ cv, —Ç.–∫. SVM –º–µ–¥–ª–µ–Ω–Ω–µ–µ

        training_time = time.time() - start_time

        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        mlflow.log_metrics({
            "accuracy": accuracy,
            "precision": precision,
            "recall": recall,
            "f1_score": f1,
            "cv_mean_accuracy": cv_scores.mean(),
            "cv_std_accuracy": cv_scores.std(),
            "training_time_seconds": training_time
        })

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        mlflow.log_artifact("data/processed/X_train.csv", "data")
        mlflow.log_artifact("data/processed/X_test.csv", "data")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        model_path = "models/svm_model.joblib"
        joblib.dump(model, model_path)
        mlflow.log_artifact(model_path, "models")

        # Confusion matrix
        plt.figure(figsize=(10, 8))
        cm = confusion_matrix(y_test, y_pred)
        sns.heatmap(cm, annot=True, fmt='d', cmap='Reds')
        plt.title('Confusion Matrix - SVM')
        plt.ylabel('True Label')
        plt.xlabel('Predicted Label')
        plt.savefig('confusion_matrix_svm.png')
        mlflow.log_artifact('confusion_matrix_svm.png')
        plt.close()

        logger.info(f"SVM –æ–±—É—á–µ–Ω –∑–∞ {training_time:.2f} —Å–µ–∫. Accuracy: {accuracy:.4f}")

        return model, accuracy, training_time


def compare_models(results):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π"""
    print("\n" + "=" * 50)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)

    for model_name, result in results.items():
        acc, time = result
        print(f"{model_name}: Accuracy = {acc:.4f}, Time = {time:.2f} —Å–µ–∫")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
    best_model = max(results.items(), key=lambda x: x[1][0])
    print(f"\nüèÜ –õ–£–ß–®–ê–Ø –ú–û–î–ï–õ–¨: {best_model[0]} —Å accuracy {best_model[1][0]:.4f}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow
    mlflow.set_experiment("Wine Quality Classification")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X_train, X_test, y_train, y_test = load_processed_data()

    results = {}

    try:
        # –û–±—É—á–∞–µ–º Random Forest
        rf_model, rf_accuracy, rf_time = train_random_forest(X_train, X_test, y_train, y_test)
        results["Random Forest"] = (rf_accuracy, rf_time)

        # –û–±—É—á–∞–µ–º SVM
        svm_model, svm_accuracy, svm_time = train_svm(X_train, X_test, y_train, y_test)
        results["SVM"] = (svm_accuracy, svm_time)

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        compare_models(results)

        logger.info("–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        raise


if __name__ == "__main__":
    main()